// Code generated by dagger-compiler.  Do not edit.
package com.turios.activities.fragments;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<BrowserFragment>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code BrowserFragment} and its
 * dependencies.
 *
 * Being a {@code Provider<BrowserFragment>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<BrowserFragment>} and handling injection
 * of annotated fields.
 */
public final class BrowserFragment$$InjectAdapter extends Binding<BrowserFragment>
    implements Provider<BrowserFragment>, MembersInjector<BrowserFragment> {
  private Binding<android.content.Context> context;
  private Binding<com.turios.modules.extend.BrowserModule> browserModule;
  private Binding<com.turios.dagger.DaggerFragment> supertype;

  public BrowserFragment$$InjectAdapter() {
    super("com.turios.activities.fragments.BrowserFragment", "members/com.turios.activities.fragments.BrowserFragment", NOT_SINGLETON, BrowserFragment.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<android.content.Context>) linker.requestBinding("@com.turios.dagger.quialifiers.ForActivity()/android.content.Context", BrowserFragment.class, getClass().getClassLoader());
    browserModule = (Binding<com.turios.modules.extend.BrowserModule>) linker.requestBinding("com.turios.modules.extend.BrowserModule", BrowserFragment.class, getClass().getClassLoader());
    supertype = (Binding<com.turios.dagger.DaggerFragment>) linker.requestBinding("members/com.turios.dagger.DaggerFragment", BrowserFragment.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(context);
    injectMembersBindings.add(browserModule);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<BrowserFragment>}.
   */
  @Override
  public BrowserFragment get() {
    BrowserFragment result = new BrowserFragment();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<BrowserFragment>}.
   */
  @Override
  public void injectMembers(BrowserFragment object) {
    object.context = context.get();
    object.browserModule = browserModule.get();
    supertype.injectMembers(object);
  }

}
