// Code generated by dagger-compiler.  Do not edit.
package com.turios.activities.setup;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<SetupProfiles>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code SetupProfiles} and its
 * dependencies.
 *
 * Being a {@code Provider<SetupProfiles>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<SetupProfiles>} and handling injection
 * of annotated fields.
 */
public final class SetupProfiles$$InjectAdapter extends Binding<SetupProfiles>
    implements Provider<SetupProfiles>, MembersInjector<SetupProfiles> {
  private Binding<com.turios.modules.core.ParseCoreModule> parse;
  private Binding<android.view.LayoutInflater> inflater;
  private Binding<android.app.ActionBar> actionbar;
  private Binding<com.turios.dagger.DaggerActivity> supertype;

  public SetupProfiles$$InjectAdapter() {
    super("com.turios.activities.setup.SetupProfiles", "members/com.turios.activities.setup.SetupProfiles", NOT_SINGLETON, SetupProfiles.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    parse = (Binding<com.turios.modules.core.ParseCoreModule>) linker.requestBinding("com.turios.modules.core.ParseCoreModule", SetupProfiles.class, getClass().getClassLoader());
    inflater = (Binding<android.view.LayoutInflater>) linker.requestBinding("android.view.LayoutInflater", SetupProfiles.class, getClass().getClassLoader());
    actionbar = (Binding<android.app.ActionBar>) linker.requestBinding("android.app.ActionBar", SetupProfiles.class, getClass().getClassLoader());
    supertype = (Binding<com.turios.dagger.DaggerActivity>) linker.requestBinding("members/com.turios.dagger.DaggerActivity", SetupProfiles.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(parse);
    injectMembersBindings.add(inflater);
    injectMembersBindings.add(actionbar);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<SetupProfiles>}.
   */
  @Override
  public SetupProfiles get() {
    SetupProfiles result = new SetupProfiles();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<SetupProfiles>}.
   */
  @Override
  public void injectMembers(SetupProfiles object) {
    object.parse = parse.get();
    object.inflater = inflater.get();
    object.actionbar = actionbar.get();
    supertype.injectMembers(object);
  }

}
