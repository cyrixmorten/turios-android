// Code generated by dagger-compiler.  Do not edit.
package com.turios.dagger.modules;

import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ActivityModule$$ModuleAdapter extends ModuleAdapter<ActivityModule> {
  private static final String[] INJECTS = { "members/com.turios.activities.SplashScreen", "members/com.turios.activities.Turios", "members/com.turios.activities.fragments.DisplayFragment", "members/com.turios.activities.fragments.GoogleMapFragment", "members/com.turios.activities.fragments.GoogleMapOptionsFragment", "members/com.turios.activities.fragments.BrowserFragment", "members/com.turios.activities.SettingsActivity", "members/com.turios.activities.setup.SetupWelcome", "members/com.turios.activities.setup.SetupProfiles", "members/com.turios.activities.setup.SetupPDFViewer", "members/com.turios.activities.setup.SetupDropbox", "members/com.turios.activities.setup.SetupDone", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public ActivityModule$$ModuleAdapter() {
    super(com.turios.dagger.modules.ActivityModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map, ActivityModule module) {
    map.put("com.turios.activities.util.WakeScreen", new ProvideWakeScreenProvidesAdapter(module));
    map.put("com.turios.activities.util.Orientation", new ProvideOrientationProvidesAdapter(module));
    map.put("com.turios.dagger.DaggerActivity", new ProvideDaggerActivityProvidesAdapter(module));
    map.put("@com.turios.dagger.quialifiers.ForActivity()/android.content.Context", new ProvideActivityContextProvidesAdapter(module));
    map.put("com.turios.activities.listeners.TuriosUICallback", new ProvideTuriosUICallbackProvidesAdapter(module));
    map.put("android.app.ActionBar", new ProvideActionBarProvidesAdapter(module));
    map.put("android.view.MenuInflater", new ProvideMenuInflaterProvidesAdapter(module));
    map.put("android.view.LayoutInflater", new ProvideLayoutInflaterProvidesAdapter(module));
    map.put("android.support.v4.app.FragmentManager", new ProvideFragmentManagerProvidesAdapter(module));
    map.put("android.app.ActionBar$TabListener", new ProvideTabListenerProvidesAdapter(module));
    map.put("android.os.Handler", new ProvideHandlerProvidesAdapter(module));
    map.put("com.turios.modules.extend.DropboxModule$DropboxFileDownloaderResultReceiver", new ProvideDropboxFileDownloaderResultReceiverProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.turios.activities.util.WakeScreen>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.turios.activities.util.WakeScreen} and its
   * dependencies.
   *
   * Being a {@code Provider<com.turios.activities.util.WakeScreen>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideWakeScreenProvidesAdapter extends Binding<com.turios.activities.util.WakeScreen>
      implements Provider<com.turios.activities.util.WakeScreen> {
    private final ActivityModule module;
    private Binding<android.content.Context> context;
    private Binding<com.turios.dagger.DaggerActivity> activity;
    private Binding<com.turios.modules.extend.BasisModule> basis;
    private Binding<com.turios.util.Notifications> notifications;

    public ProvideWakeScreenProvidesAdapter(ActivityModule module) {
      super("com.turios.activities.util.WakeScreen", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideWakeScreen()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("@com.turios.dagger.quialifiers.ForApplication()/android.content.Context", ActivityModule.class, getClass().getClassLoader());
      activity = (Binding<com.turios.dagger.DaggerActivity>) linker.requestBinding("com.turios.dagger.DaggerActivity", ActivityModule.class, getClass().getClassLoader());
      basis = (Binding<com.turios.modules.extend.BasisModule>) linker.requestBinding("com.turios.modules.extend.BasisModule", ActivityModule.class, getClass().getClassLoader());
      notifications = (Binding<com.turios.util.Notifications>) linker.requestBinding("com.turios.util.Notifications", ActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
      getBindings.add(activity);
      getBindings.add(basis);
      getBindings.add(notifications);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.turios.activities.util.WakeScreen>}.
     */
    @Override
    public com.turios.activities.util.WakeScreen get() {
      return module.provideWakeScreen(context.get(), activity.get(), basis.get(), notifications.get());
    }
  }

  /**
   * A {@code Binding<com.turios.activities.util.Orientation>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.turios.activities.util.Orientation} and its
   * dependencies.
   *
   * Being a {@code Provider<com.turios.activities.util.Orientation>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideOrientationProvidesAdapter extends Binding<com.turios.activities.util.Orientation>
      implements Provider<com.turios.activities.util.Orientation> {
    private final ActivityModule module;
    private Binding<com.turios.dagger.DaggerActivity> activity;

    public ProvideOrientationProvidesAdapter(ActivityModule module) {
      super("com.turios.activities.util.Orientation", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideOrientation()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      activity = (Binding<com.turios.dagger.DaggerActivity>) linker.requestBinding("com.turios.dagger.DaggerActivity", ActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(activity);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.turios.activities.util.Orientation>}.
     */
    @Override
    public com.turios.activities.util.Orientation get() {
      return module.provideOrientation(activity.get());
    }
  }

  /**
   * A {@code Binding<com.turios.dagger.DaggerActivity>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.turios.dagger.DaggerActivity>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideDaggerActivityProvidesAdapter extends Binding<com.turios.dagger.DaggerActivity>
      implements Provider<com.turios.dagger.DaggerActivity> {
    private final ActivityModule module;

    public ProvideDaggerActivityProvidesAdapter(ActivityModule module) {
      super("com.turios.dagger.DaggerActivity", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideDaggerActivity()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.turios.dagger.DaggerActivity>}.
     */
    @Override
    public com.turios.dagger.DaggerActivity get() {
      return module.provideDaggerActivity();
    }
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideActivityContextProvidesAdapter extends Binding<android.content.Context>
      implements Provider<android.content.Context> {
    private final ActivityModule module;

    public ProvideActivityContextProvidesAdapter(ActivityModule module) {
      super("@com.turios.dagger.quialifiers.ForActivity()/android.content.Context", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideActivityContext()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideActivityContext();
    }
  }

  /**
   * A {@code Binding<com.turios.activities.listeners.TuriosUICallback>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.turios.activities.listeners.TuriosUICallback>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideTuriosUICallbackProvidesAdapter extends Binding<com.turios.activities.listeners.TuriosUICallback>
      implements Provider<com.turios.activities.listeners.TuriosUICallback> {
    private final ActivityModule module;

    public ProvideTuriosUICallbackProvidesAdapter(ActivityModule module) {
      super("com.turios.activities.listeners.TuriosUICallback", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideTuriosUICallback()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.turios.activities.listeners.TuriosUICallback>}.
     */
    @Override
    public com.turios.activities.listeners.TuriosUICallback get() {
      return module.provideTuriosUICallback();
    }
  }

  /**
   * A {@code Binding<android.app.ActionBar>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.ActionBar>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideActionBarProvidesAdapter extends Binding<android.app.ActionBar>
      implements Provider<android.app.ActionBar> {
    private final ActivityModule module;

    public ProvideActionBarProvidesAdapter(ActivityModule module) {
      super("android.app.ActionBar", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideActionBar()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.ActionBar>}.
     */
    @Override
    public android.app.ActionBar get() {
      return module.provideActionBar();
    }
  }

  /**
   * A {@code Binding<android.view.MenuInflater>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.view.MenuInflater>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMenuInflaterProvidesAdapter extends Binding<android.view.MenuInflater>
      implements Provider<android.view.MenuInflater> {
    private final ActivityModule module;

    public ProvideMenuInflaterProvidesAdapter(ActivityModule module) {
      super("android.view.MenuInflater", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideMenuInflater()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.view.MenuInflater>}.
     */
    @Override
    public android.view.MenuInflater get() {
      return module.provideMenuInflater();
    }
  }

  /**
   * A {@code Binding<android.view.LayoutInflater>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.view.LayoutInflater>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideLayoutInflaterProvidesAdapter extends Binding<android.view.LayoutInflater>
      implements Provider<android.view.LayoutInflater> {
    private final ActivityModule module;

    public ProvideLayoutInflaterProvidesAdapter(ActivityModule module) {
      super("android.view.LayoutInflater", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideLayoutInflater()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.view.LayoutInflater>}.
     */
    @Override
    public android.view.LayoutInflater get() {
      return module.provideLayoutInflater();
    }
  }

  /**
   * A {@code Binding<android.support.v4.app.FragmentManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.support.v4.app.FragmentManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFragmentManagerProvidesAdapter extends Binding<android.support.v4.app.FragmentManager>
      implements Provider<android.support.v4.app.FragmentManager> {
    private final ActivityModule module;

    public ProvideFragmentManagerProvidesAdapter(ActivityModule module) {
      super("android.support.v4.app.FragmentManager", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideFragmentManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.support.v4.app.FragmentManager>}.
     */
    @Override
    public android.support.v4.app.FragmentManager get() {
      return module.provideFragmentManager();
    }
  }

  /**
   * A {@code Binding<android.app.ActionBar.TabListener>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.ActionBar.TabListener>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideTabListenerProvidesAdapter extends Binding<android.app.ActionBar.TabListener>
      implements Provider<android.app.ActionBar.TabListener> {
    private final ActivityModule module;

    public ProvideTabListenerProvidesAdapter(ActivityModule module) {
      super("android.app.ActionBar$TabListener", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideTabListener()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.ActionBar.TabListener>}.
     */
    @Override
    public android.app.ActionBar.TabListener get() {
      return module.provideTabListener();
    }
  }

  /**
   * A {@code Binding<android.os.Handler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.os.Handler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHandlerProvidesAdapter extends Binding<android.os.Handler>
      implements Provider<android.os.Handler> {
    private final ActivityModule module;

    public ProvideHandlerProvidesAdapter(ActivityModule module) {
      super("android.os.Handler", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideHandler()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.os.Handler>}.
     */
    @Override
    public android.os.Handler get() {
      return module.provideHandler();
    }
  }

  /**
   * A {@code Binding<com.turios.modules.extend.DropboxModule.DropboxFileDownloaderResultReceiver>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.turios.modules.extend.DropboxModule.DropboxFileDownloaderResultReceiver} and its
   * dependencies.
   *
   * Being a {@code Provider<com.turios.modules.extend.DropboxModule.DropboxFileDownloaderResultReceiver>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideDropboxFileDownloaderResultReceiverProvidesAdapter extends Binding<com.turios.modules.extend.DropboxModule.DropboxFileDownloaderResultReceiver>
      implements Provider<com.turios.modules.extend.DropboxModule.DropboxFileDownloaderResultReceiver> {
    private final ActivityModule module;
    private Binding<com.turios.modules.extend.DropboxModule> dropbox;
    private Binding<android.os.Handler> handler;

    public ProvideDropboxFileDownloaderResultReceiverProvidesAdapter(ActivityModule module) {
      super("com.turios.modules.extend.DropboxModule$DropboxFileDownloaderResultReceiver", null, IS_SINGLETON, "com.turios.dagger.modules.ActivityModule.provideDropboxFileDownloaderResultReceiver()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      dropbox = (Binding<com.turios.modules.extend.DropboxModule>) linker.requestBinding("com.turios.modules.extend.DropboxModule", ActivityModule.class, getClass().getClassLoader());
      handler = (Binding<android.os.Handler>) linker.requestBinding("android.os.Handler", ActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(dropbox);
      getBindings.add(handler);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.turios.modules.extend.DropboxModule.DropboxFileDownloaderResultReceiver>}.
     */
    @Override
    public com.turios.modules.extend.DropboxModule.DropboxFileDownloaderResultReceiver get() {
      return module.provideDropboxFileDownloaderResultReceiver(dropbox.get(), handler.get());
    }
  }
}
