// Code generated by dagger-compiler.  Do not edit.
package com.turios.wakefulservices;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<UpdateStateService>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code UpdateStateService} and its
 * dependencies.
 *
 * Being a {@code Provider<UpdateStateService>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<UpdateStateService>} and handling injection
 * of annotated fields.
 */
public final class UpdateStateService$$InjectAdapter extends Binding<UpdateStateService>
    implements Provider<UpdateStateService>, MembersInjector<UpdateStateService> {
  private Binding<com.turios.modules.core.ParseCoreModule> parse;
  private Binding<com.turios.modules.core.ExpirationCoreModule> expiration;
  private Binding<com.turios.modules.extend.BasisModule> basisModule;
  private Binding<com.turios.modules.extend.DropboxModule> dropboxModule;
  private Binding<com.turios.dagger.DaggerWakefulIntentService> supertype;

  public UpdateStateService$$InjectAdapter() {
    super("com.turios.wakefulservices.UpdateStateService", "members/com.turios.wakefulservices.UpdateStateService", NOT_SINGLETON, UpdateStateService.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    parse = (Binding<com.turios.modules.core.ParseCoreModule>) linker.requestBinding("com.turios.modules.core.ParseCoreModule", UpdateStateService.class, getClass().getClassLoader());
    expiration = (Binding<com.turios.modules.core.ExpirationCoreModule>) linker.requestBinding("com.turios.modules.core.ExpirationCoreModule", UpdateStateService.class, getClass().getClassLoader());
    basisModule = (Binding<com.turios.modules.extend.BasisModule>) linker.requestBinding("com.turios.modules.extend.BasisModule", UpdateStateService.class, getClass().getClassLoader());
    dropboxModule = (Binding<com.turios.modules.extend.DropboxModule>) linker.requestBinding("com.turios.modules.extend.DropboxModule", UpdateStateService.class, getClass().getClassLoader());
    supertype = (Binding<com.turios.dagger.DaggerWakefulIntentService>) linker.requestBinding("members/com.turios.dagger.DaggerWakefulIntentService", UpdateStateService.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(parse);
    injectMembersBindings.add(expiration);
    injectMembersBindings.add(basisModule);
    injectMembersBindings.add(dropboxModule);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<UpdateStateService>}.
   */
  @Override
  public UpdateStateService get() {
    UpdateStateService result = new UpdateStateService();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<UpdateStateService>}.
   */
  @Override
  public void injectMembers(UpdateStateService object) {
    object.parse = parse.get();
    object.expiration = expiration.get();
    object.basisModule = basisModule.get();
    object.dropboxModule = dropboxModule.get();
    supertype.injectMembers(object);
  }

}
