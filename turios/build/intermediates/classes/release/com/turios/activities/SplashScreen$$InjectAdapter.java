// Code generated by dagger-compiler.  Do not edit.
package com.turios.activities;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<SplashScreen>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code SplashScreen} and its
 * dependencies.
 *
 * Being a {@code Provider<SplashScreen>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<SplashScreen>} and handling injection
 * of annotated fields.
 */
public final class SplashScreen$$InjectAdapter extends Binding<SplashScreen>
    implements Provider<SplashScreen>, MembersInjector<SplashScreen> {
  private Binding<com.turios.util.Device> device;
  private Binding<com.turios.activities.util.Orientation> orientation;
  private Binding<com.turios.persistence.Preferences> preferences;
  private Binding<android.support.v4.app.FragmentManager> fm;
  private Binding<com.turios.modules.core.ParseCoreModule> parse;
  private Binding<com.turios.modules.extend.AccessplansModule> accessplansModule;
  private Binding<com.turios.modules.extend.BasisModule> basisModule;
  private Binding<com.turios.modules.extend.BrowserModule> browserModule;
  private Binding<com.turios.modules.extend.DirectionsModule> directionsModule;
  private Binding<com.turios.modules.extend.DropboxModule> dropboxModule;
  private Binding<com.turios.modules.extend.GoogleMapsModule> googleMapsModule;
  private Binding<com.turios.modules.extend.HydrantsModule> hydrantsModule;
  private Binding<com.turios.modules.extend.PicklistModule> picklistModule;
  private Binding<com.turios.dagger.DaggerActivity> supertype;

  public SplashScreen$$InjectAdapter() {
    super("com.turios.activities.SplashScreen", "members/com.turios.activities.SplashScreen", NOT_SINGLETON, SplashScreen.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    device = (Binding<com.turios.util.Device>) linker.requestBinding("com.turios.util.Device", SplashScreen.class, getClass().getClassLoader());
    orientation = (Binding<com.turios.activities.util.Orientation>) linker.requestBinding("com.turios.activities.util.Orientation", SplashScreen.class, getClass().getClassLoader());
    preferences = (Binding<com.turios.persistence.Preferences>) linker.requestBinding("com.turios.persistence.Preferences", SplashScreen.class, getClass().getClassLoader());
    fm = (Binding<android.support.v4.app.FragmentManager>) linker.requestBinding("android.support.v4.app.FragmentManager", SplashScreen.class, getClass().getClassLoader());
    parse = (Binding<com.turios.modules.core.ParseCoreModule>) linker.requestBinding("com.turios.modules.core.ParseCoreModule", SplashScreen.class, getClass().getClassLoader());
    accessplansModule = (Binding<com.turios.modules.extend.AccessplansModule>) linker.requestBinding("com.turios.modules.extend.AccessplansModule", SplashScreen.class, getClass().getClassLoader());
    basisModule = (Binding<com.turios.modules.extend.BasisModule>) linker.requestBinding("com.turios.modules.extend.BasisModule", SplashScreen.class, getClass().getClassLoader());
    browserModule = (Binding<com.turios.modules.extend.BrowserModule>) linker.requestBinding("com.turios.modules.extend.BrowserModule", SplashScreen.class, getClass().getClassLoader());
    directionsModule = (Binding<com.turios.modules.extend.DirectionsModule>) linker.requestBinding("com.turios.modules.extend.DirectionsModule", SplashScreen.class, getClass().getClassLoader());
    dropboxModule = (Binding<com.turios.modules.extend.DropboxModule>) linker.requestBinding("com.turios.modules.extend.DropboxModule", SplashScreen.class, getClass().getClassLoader());
    googleMapsModule = (Binding<com.turios.modules.extend.GoogleMapsModule>) linker.requestBinding("com.turios.modules.extend.GoogleMapsModule", SplashScreen.class, getClass().getClassLoader());
    hydrantsModule = (Binding<com.turios.modules.extend.HydrantsModule>) linker.requestBinding("com.turios.modules.extend.HydrantsModule", SplashScreen.class, getClass().getClassLoader());
    picklistModule = (Binding<com.turios.modules.extend.PicklistModule>) linker.requestBinding("com.turios.modules.extend.PicklistModule", SplashScreen.class, getClass().getClassLoader());
    supertype = (Binding<com.turios.dagger.DaggerActivity>) linker.requestBinding("members/com.turios.dagger.DaggerActivity", SplashScreen.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(device);
    injectMembersBindings.add(orientation);
    injectMembersBindings.add(preferences);
    injectMembersBindings.add(fm);
    injectMembersBindings.add(parse);
    injectMembersBindings.add(accessplansModule);
    injectMembersBindings.add(basisModule);
    injectMembersBindings.add(browserModule);
    injectMembersBindings.add(directionsModule);
    injectMembersBindings.add(dropboxModule);
    injectMembersBindings.add(googleMapsModule);
    injectMembersBindings.add(hydrantsModule);
    injectMembersBindings.add(picklistModule);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<SplashScreen>}.
   */
  @Override
  public SplashScreen get() {
    SplashScreen result = new SplashScreen();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<SplashScreen>}.
   */
  @Override
  public void injectMembers(SplashScreen object) {
    object.device = device.get();
    object.orientation = orientation.get();
    object.preferences = preferences.get();
    object.fm = fm.get();
    object.parse = parse.get();
    object.accessplansModule = accessplansModule.get();
    object.basisModule = basisModule.get();
    object.browserModule = browserModule.get();
    object.directionsModule = directionsModule.get();
    object.dropboxModule = dropboxModule.get();
    object.googleMapsModule = googleMapsModule.get();
    object.hydrantsModule = hydrantsModule.get();
    object.picklistModule = picklistModule.get();
    supertype.injectMembers(object);
  }

}
