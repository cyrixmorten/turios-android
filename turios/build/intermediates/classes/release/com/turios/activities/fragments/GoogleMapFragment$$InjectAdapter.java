// Code generated by dagger-compiler.  Do not edit.
package com.turios.activities.fragments;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<GoogleMapFragment>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code GoogleMapFragment} and its
 * dependencies.
 *
 * Being a {@code Provider<GoogleMapFragment>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<GoogleMapFragment>} and handling injection
 * of annotated fields.
 */
public final class GoogleMapFragment$$InjectAdapter extends Binding<GoogleMapFragment>
    implements Provider<GoogleMapFragment>, MembersInjector<GoogleMapFragment> {
  private Binding<com.turios.dagger.DaggerActivity> activity;
  private Binding<android.content.Context> context;
  private Binding<com.turios.modules.extend.HydrantsModule> hydrantsModule;
  private Binding<com.turios.modules.extend.DirectionsModule> directionsModule;
  private Binding<com.turios.modules.extend.GoogleMapsModule> googlemaps;
  private Binding<com.turios.dagger.DaggerMapFragment> supertype;

  public GoogleMapFragment$$InjectAdapter() {
    super("com.turios.activities.fragments.GoogleMapFragment", "members/com.turios.activities.fragments.GoogleMapFragment", NOT_SINGLETON, GoogleMapFragment.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    activity = (Binding<com.turios.dagger.DaggerActivity>) linker.requestBinding("com.turios.dagger.DaggerActivity", GoogleMapFragment.class, getClass().getClassLoader());
    context = (Binding<android.content.Context>) linker.requestBinding("@com.turios.dagger.quialifiers.ForApplication()/android.content.Context", GoogleMapFragment.class, getClass().getClassLoader());
    hydrantsModule = (Binding<com.turios.modules.extend.HydrantsModule>) linker.requestBinding("com.turios.modules.extend.HydrantsModule", GoogleMapFragment.class, getClass().getClassLoader());
    directionsModule = (Binding<com.turios.modules.extend.DirectionsModule>) linker.requestBinding("com.turios.modules.extend.DirectionsModule", GoogleMapFragment.class, getClass().getClassLoader());
    googlemaps = (Binding<com.turios.modules.extend.GoogleMapsModule>) linker.requestBinding("com.turios.modules.extend.GoogleMapsModule", GoogleMapFragment.class, getClass().getClassLoader());
    supertype = (Binding<com.turios.dagger.DaggerMapFragment>) linker.requestBinding("members/com.turios.dagger.DaggerMapFragment", GoogleMapFragment.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(activity);
    injectMembersBindings.add(context);
    injectMembersBindings.add(hydrantsModule);
    injectMembersBindings.add(directionsModule);
    injectMembersBindings.add(googlemaps);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<GoogleMapFragment>}.
   */
  @Override
  public GoogleMapFragment get() {
    GoogleMapFragment result = new GoogleMapFragment();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<GoogleMapFragment>}.
   */
  @Override
  public void injectMembers(GoogleMapFragment object) {
    object.activity = activity.get();
    object.context = context.get();
    object.hydrantsModule = hydrantsModule.get();
    object.directionsModule = directionsModule.get();
    object.googlemaps = googlemaps.get();
    supertype.injectMembers(object);
  }

}
