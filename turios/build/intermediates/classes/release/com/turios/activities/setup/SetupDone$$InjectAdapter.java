// Code generated by dagger-compiler.  Do not edit.
package com.turios.activities.setup;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<SetupDone>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code SetupDone} and its
 * dependencies.
 *
 * Being a {@code Provider<SetupDone>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<SetupDone>} and handling injection
 * of annotated fields.
 */
public final class SetupDone$$InjectAdapter extends Binding<SetupDone>
    implements Provider<SetupDone>, MembersInjector<SetupDone> {
  private Binding<android.app.ActionBar> actionbar;
  private Binding<com.turios.persistence.Preferences> preferences;
  private Binding<com.turios.dagger.DaggerActivity> supertype;

  public SetupDone$$InjectAdapter() {
    super("com.turios.activities.setup.SetupDone", "members/com.turios.activities.setup.SetupDone", NOT_SINGLETON, SetupDone.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    actionbar = (Binding<android.app.ActionBar>) linker.requestBinding("android.app.ActionBar", SetupDone.class, getClass().getClassLoader());
    preferences = (Binding<com.turios.persistence.Preferences>) linker.requestBinding("com.turios.persistence.Preferences", SetupDone.class, getClass().getClassLoader());
    supertype = (Binding<com.turios.dagger.DaggerActivity>) linker.requestBinding("members/com.turios.dagger.DaggerActivity", SetupDone.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(actionbar);
    injectMembersBindings.add(preferences);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<SetupDone>}.
   */
  @Override
  public SetupDone get() {
    SetupDone result = new SetupDone();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<SetupDone>}.
   */
  @Override
  public void injectMembers(SetupDone object) {
    object.actionbar = actionbar.get();
    object.preferences = preferences.get();
    supertype.injectMembers(object);
  }

}
