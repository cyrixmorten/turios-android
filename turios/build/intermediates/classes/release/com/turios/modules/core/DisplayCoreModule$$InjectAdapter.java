// Code generated by dagger-compiler.  Do not edit.
package com.turios.modules.core;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<DisplayCoreModule>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code DisplayCoreModule} and its
 * dependencies.
 *
 * Being a {@code Provider<DisplayCoreModule>} and handling creation and
 * preparation of object instances.
 */
public final class DisplayCoreModule$$InjectAdapter extends Binding<DisplayCoreModule>
    implements Provider<DisplayCoreModule> {
  private Binding<DatabaseCoreModule> databaseCoreModule;
  private Binding<LocationsCoreModule> locationsCoreModule;
  private Binding<com.turios.util.Notifications> notifications;
  private Binding<ParseCoreModule> parseCoreModule;

  public DisplayCoreModule$$InjectAdapter() {
    super("com.turios.modules.core.DisplayCoreModule", "members/com.turios.modules.core.DisplayCoreModule", IS_SINGLETON, DisplayCoreModule.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    databaseCoreModule = (Binding<DatabaseCoreModule>) linker.requestBinding("com.turios.modules.core.DatabaseCoreModule", DisplayCoreModule.class, getClass().getClassLoader());
    locationsCoreModule = (Binding<LocationsCoreModule>) linker.requestBinding("com.turios.modules.core.LocationsCoreModule", DisplayCoreModule.class, getClass().getClassLoader());
    notifications = (Binding<com.turios.util.Notifications>) linker.requestBinding("com.turios.util.Notifications", DisplayCoreModule.class, getClass().getClassLoader());
    parseCoreModule = (Binding<ParseCoreModule>) linker.requestBinding("com.turios.modules.core.ParseCoreModule", DisplayCoreModule.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(databaseCoreModule);
    getBindings.add(locationsCoreModule);
    getBindings.add(notifications);
    getBindings.add(parseCoreModule);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<DisplayCoreModule>}.
   */
  @Override
  public DisplayCoreModule get() {
    DisplayCoreModule result = new DisplayCoreModule(databaseCoreModule.get(), locationsCoreModule.get(), notifications.get(), parseCoreModule.get());
    return result;
  }

}
