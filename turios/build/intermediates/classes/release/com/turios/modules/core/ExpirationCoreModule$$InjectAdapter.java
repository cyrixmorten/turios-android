// Code generated by dagger-compiler.  Do not edit.
package com.turios.modules.core;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<ExpirationCoreModule>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code ExpirationCoreModule} and its
 * dependencies.
 *
 * Being a {@code Provider<ExpirationCoreModule>} and handling creation and
 * preparation of object instances.
 */
public final class ExpirationCoreModule$$InjectAdapter extends Binding<ExpirationCoreModule>
    implements Provider<ExpirationCoreModule> {
  private Binding<ParseCoreModule> parse;

  public ExpirationCoreModule$$InjectAdapter() {
    super("com.turios.modules.core.ExpirationCoreModule", "members/com.turios.modules.core.ExpirationCoreModule", IS_SINGLETON, ExpirationCoreModule.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    parse = (Binding<ParseCoreModule>) linker.requestBinding("com.turios.modules.core.ParseCoreModule", ExpirationCoreModule.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(parse);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<ExpirationCoreModule>}.
   */
  @Override
  public ExpirationCoreModule get() {
    ExpirationCoreModule result = new ExpirationCoreModule(parse.get());
    return result;
  }

}
