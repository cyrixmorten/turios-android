// Code generated by dagger-compiler.  Do not edit.
package com.turios.modules.extend;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<BasisModule>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code BasisModule} and its
 * dependencies.
 *
 * Being a {@code Provider<BasisModule>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<BasisModule>} and handling injection
 * of annotated fields.
 */
public final class BasisModule$$InjectAdapter extends Binding<BasisModule>
    implements Provider<BasisModule>, MembersInjector<BasisModule> {
  private Binding<android.content.Context> context;
  private Binding<com.turios.persistence.Preferences> preferences;
  private Binding<com.turios.modules.core.ExpirationCoreModule> expiration;
  private Binding<com.turios.modules.core.ParseCoreModule> parse;
  private Binding<StandardModule> supertype;

  public BasisModule$$InjectAdapter() {
    super("com.turios.modules.extend.BasisModule", "members/com.turios.modules.extend.BasisModule", IS_SINGLETON, BasisModule.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<android.content.Context>) linker.requestBinding("@com.turios.dagger.quialifiers.ForApplication()/android.content.Context", BasisModule.class, getClass().getClassLoader());
    preferences = (Binding<com.turios.persistence.Preferences>) linker.requestBinding("com.turios.persistence.Preferences", BasisModule.class, getClass().getClassLoader());
    expiration = (Binding<com.turios.modules.core.ExpirationCoreModule>) linker.requestBinding("com.turios.modules.core.ExpirationCoreModule", BasisModule.class, getClass().getClassLoader());
    parse = (Binding<com.turios.modules.core.ParseCoreModule>) linker.requestBinding("com.turios.modules.core.ParseCoreModule", BasisModule.class, getClass().getClassLoader());
    supertype = (Binding<StandardModule>) linker.requestBinding("members/com.turios.modules.extend.StandardModule", BasisModule.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(context);
    getBindings.add(preferences);
    getBindings.add(expiration);
    getBindings.add(parse);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<BasisModule>}.
   */
  @Override
  public BasisModule get() {
    BasisModule result = new BasisModule(context.get(), preferences.get(), expiration.get(), parse.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<BasisModule>}.
   */
  @Override
  public void injectMembers(BasisModule object) {
    supertype.injectMembers(object);
  }

}
