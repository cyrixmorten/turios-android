// Code generated by dagger-compiler.  Do not edit.
package com.turios.util;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<Notifications>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code Notifications} and its
 * dependencies.
 *
 * Being a {@code Provider<Notifications>} and handling creation and
 * preparation of object instances.
 */
public final class Notifications$$InjectAdapter extends Binding<Notifications>
    implements Provider<Notifications> {
  private Binding<android.content.Context> context;
  private Binding<com.turios.modules.extend.BasisModule> basis;

  public Notifications$$InjectAdapter() {
    super("com.turios.util.Notifications", "members/com.turios.util.Notifications", NOT_SINGLETON, Notifications.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<android.content.Context>) linker.requestBinding("@com.turios.dagger.quialifiers.ForApplication()/android.content.Context", Notifications.class, getClass().getClassLoader());
    basis = (Binding<com.turios.modules.extend.BasisModule>) linker.requestBinding("com.turios.modules.extend.BasisModule", Notifications.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(context);
    getBindings.add(basis);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Notifications>}.
   */
  @Override
  public Notifications get() {
    Notifications result = new Notifications(context.get(), basis.get());
    return result;
  }

}
